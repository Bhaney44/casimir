/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SSVManagerInterface extends utils.Interface {
  functions: {
    "deposit()": FunctionFragment;
    "getBalanceForPool(address)": FunctionFragment;
    "getOpenPools()": FunctionFragment;
    "getPoolsForUser(address)": FunctionFragment;
    "getStakedPools()": FunctionFragment;
    "getUserBalanceForPool(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "getBalanceForPool"
      | "getOpenPools"
      | "getPoolsForUser"
      | "getStakedPools"
      | "getUserBalanceForPool"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalanceForPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsForUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalanceForPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceForPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalanceForPool",
    data: BytesLike
  ): Result;

  events: {
    "PoolDeposit(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolDeposit"): EventFragment;
}

export interface PoolDepositEventObject {
  userAddress: string;
  poolAddress: string;
  depositAmount: BigNumber;
  depositTime: BigNumber;
}
export type PoolDepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PoolDepositEventObject
>;

export type PoolDepositEventFilter = TypedEventFilter<PoolDepositEvent>;

export interface SSVManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SSVManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalanceForPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenPools(overrides?: CallOverrides): Promise<[string[]]>;

    getPoolsForUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getStakedPools(overrides?: CallOverrides): Promise<[string[]]>;

    getUserBalanceForPool(
      userAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalanceForPool(
    poolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenPools(overrides?: CallOverrides): Promise<string[]>;

  getPoolsForUser(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getStakedPools(overrides?: CallOverrides): Promise<string[]>;

  getUserBalanceForPool(
    userAddress: PromiseOrValue<string>,
    poolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    deposit(overrides?: CallOverrides): Promise<void>;

    getBalanceForPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenPools(overrides?: CallOverrides): Promise<string[]>;

    getPoolsForUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getStakedPools(overrides?: CallOverrides): Promise<string[]>;

    getUserBalanceForPool(
      userAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "PoolDeposit(address,address,uint256,uint256)"(
      userAddress?: null,
      poolAddress?: null,
      depositAmount?: null,
      depositTime?: null
    ): PoolDepositEventFilter;
    PoolDeposit(
      userAddress?: null,
      poolAddress?: null,
      depositAmount?: null,
      depositTime?: null
    ): PoolDepositEventFilter;
  };

  estimateGas: {
    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalanceForPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolsForUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedPools(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalanceForPool(
      userAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalanceForPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolsForUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserBalanceForPool(
      userAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
