/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PoolManagerInterface extends utils.Interface {
  functions: {
    "depositContract()": FunctionFragment;
    "depositThreshold()": FunctionFragment;
    "stake()": FunctionFragment;
    "userBalances(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositContract"
      | "depositThreshold"
      | "stake"
      | "userBalances"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;

  events: {
    "Stake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
}

export interface StakeEventObject {
  userAddress: string;
  stakedAmount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface PoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositContract(overrides?: CallOverrides): Promise<[string]>;

    depositThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  depositContract(overrides?: CallOverrides): Promise<string>;

  depositThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBalances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    depositContract(overrides?: CallOverrides): Promise<string>;

    depositThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<void>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Stake(address,uint256)"(
      userAddress?: null,
      stakedAmount?: null
    ): StakeEventFilter;
    Stake(userAddress?: null, stakedAmount?: null): StakeEventFilter;
  };

  estimateGas: {
    depositContract(overrides?: CallOverrides): Promise<BigNumber>;

    depositThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
