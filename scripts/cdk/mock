#!/bin/bash
# Mock AWS resources and run tests in localstack
#
# Example:
#
#    scripts/cdk/mock -d ./path/to/cdk-directory -s string-of-services (i.e. -s users,analytics)
#
# Further information:
# See https://docs.aws.amazon.com/cdk/api/v2/
#

# Get args
while getopts d:s: flag
do
    case "${flag}" in
        d) directory=${OPTARG};;
        s) services=${OPTARG};;
    esac
done

# Check required args
if [ -z "$directory" ]; then
    echo "‚ö†Ô∏è CDK source directory is not set ‚Äì please specify as -d ./path/to/cdk-directory"
    exit 1
fi

if [ -z "$(ls -A $directory)" ]; then
    echo "‚ö†Ô∏è CDK source directory is empty ‚Äì please make sure you have a valid CDK source directory"
    exit 1
fi

if [ -z "$services" ]; then
    echo "‚ö†Ô∏è Services to mock are not set ‚Äì please specify as -s string-of-services (i.e. -s users,analytics)"
    exit 1
fi

# Get variables from root .env
export $(xargs < .env)

# Set default profile
profile="consensus-networks-dev"

if [ ${PROFILE+x} ]; then
    echo "PROFILE is set to '$PROFILE'"
    profile=$PROFILE
else
    export PROFILE="$profile"
    echo "PROFILE is not set, using default profile $PROFILE"
fi

# Override project if PROJECT is set in .env
if [ ${PROJECT+x} ]; then
    echo "PROJECT is set to '$PROJECT'"
else
    export PROJECT="casimir"
    echo "PROJECT is not set, using default project $PROJECT"
fi

# Override stage if STAGE is set in .env
if [ ${STAGE+x} ]; then
    echo "STAGE is set to '$STAGE'"
else
    export STAGE="dev"
    echo "STAGE is not set, using default stage $STAGE"
fi

# Set PascalCase variables
Project=$(perl -ne 'print ucfirst' <<< $PROJECT)
Stage=$(perl -ne 'print ucfirst' <<< $STAGE)

echo "üé® Mocking CDK app"
cd $directory

# Mock CDK app
npm install
npx cdk synth

# Loop over comma-separated string of services
IFS=',' read -r -a service_list <<< "$services"
port=4000

for service in "${service_list[@]}"
do
    port=$(( port + 1 ))
    export $(echo PUBLIC_${service^^}_URL=http://localhost:$port)
    echo "üé® Mocking service $service on port $port"
    Service=$(perl -ne 'print ucfirst' <<< $service)
    sam local start-api \
    --port $port \
    --template ./cdk.out/${Project}${Service}Stack${Stage}.template.json \
    --profile $profile & # Run in parallel
done

export PUBLIC_MOCK=true